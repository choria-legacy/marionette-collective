#!/bin/sh
#
# mcollective   Application Server for STOMP based agents
#
# chkconfig:    345 24 76
#
# description:  mcollective lets you build powerful Stomp compatible middleware clients in ruby without having to worry too
#               much about all the setup and management of a Stomp connection, it also provides stats, logging and so forth
#               as a bonus.
#
### BEGIN INIT INFO
# Provides:          mcollective
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
[ -f /etc/rc.status ] && . /etc/rc.status
[ -f /etc/sysconfig/mcollective ] && . /etc/sysconfig/mcollective

desc=${DESC:-mcollective daemon}
daemon=${DAEMON:-/opt/puppetlabs/puppet/bin/mcollectived}
name=${NAME:-mcollectived}
pidfile=${PIDFILE:-/var/run/puppetlabs/mcollectived.pid}
daemon_opts=${DAEMON_OPTS:---pid ${pidfile}}

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - misc error
# 2 - invalid or excess args
# 3 - unimplemented feature (e.g. reload)
# 4 - insufficient privilege
# 5 - program not installed
# 6 - program not configured
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
        echo -n "Starting ${desc}: "
        ## Start daemon with startproc(8). If this fails
        ## the echo return value is set appropriate.
        # startproc should return 0, even if service is
        # already running to match LSB spec.
        startproc -p $pidfile $daemon $daemon_opts
        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n "Stopping ${desc}: "
        ## Stop daemon with killproc(8) and if this fails
        ## set echo the echo return value.

        killproc -p $pidfile $daemon && rm -f ${pidfile}

        # Remember status and be verbose
        rc_status -v
        ;;
    try-restart|condrestart|force-reload)
        ## Stop the service and if this succeeds (i.e. the
        ## service was running before), start it again.
        $0 status &> /dev/null
        if test $? = 0; then
                $0 restart
        else
                rc_reset        # Not running is not a failure.
        fi

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        sleep 1
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    status)
        echo -n "Checking ${desc}: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
        checkproc -p ${pidfile} ${daemon}
        rc_status -v
        ;;
    *)
        echo "Usage: $0 {start|stop|status|try-restart|condrestart|restart|force-reload}"
        exit 1
        ;;
esac
rc_exit
